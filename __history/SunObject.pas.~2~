unit SunObject;

interface
uses
  Windows,  Classes, Graphics;
type
  TSun = class
  private
    x, y        : integer;
    angle       : real;
    rays        : real;
   // procedure   Set_Angle         (const Alpha : Real);   function    Get_Angle         : Real; procedure   Set_Rays;    function    Get_Rays         : Real;
  public


    constructor Create (const x,  y : integer) overload;
    procedure   Draw   (const Canvas: TCanvas);
     procedure   Set_Rays;    function    Get_Rays         : Real;
 //   procedure   Rounding_Rays;  
    //procedure Rounding_Sun;
  const 
    rad = 50; 
  end;

implementation

constructor TSun.Create (const x,  y : integer) overload;
    begin
        self := TSun.Create;
        self.x := x;
        self.y := y;
    end; 

procedure TSun.Set_Rays;
    begin 
        rays := Random (11) + 15;  
    end;

function TSun.Get_Rays: Real;
    begin 
        result := rays; 
    end;
    
procedure TSun.Draw(const Canvas: TCanvas);
    var 
        k, j : integer;
        s, g : real;
    begin
        Canvas.Pen.Color    := clYellow;
        Canvas.Brush.Color  := clYellow;
        Canvas.Ellipse(x-rad, y-rad, x+rad, y+rad);
        Canvas.Pen.Width := 3;
        k :=  25; s := 0; g := 2*pi/k;
        for j := 0 to k-1 do begin
          Canvas.Moveto(x + round(rad*cos(s)+2.5*cos(s)), y + round(rad*sin(s) + 2.5*sin(s)));
          Canvas.Lineto(x + round(rays*rad*cos(s)), y + round(rays*rad*sin(s)));
        end;
    end;
end.
