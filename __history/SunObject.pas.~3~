unit SunObject;

interface
uses
  Windows,  Classes, Graphics;
type
  TSun = class
  private
    x, y        : integer;
    angle       : real;
    rays        : real;
   // procedure   Set_Angle         (const Alpha : Real);   function    Get_Angle         : Real; procedure   Set_Rays;    function    Get_Rays         : Real;
  public


    constructor Create (const x,  y : integer) overload;
    procedure   Draw   (const Canvas: TCanvas);
 //   procedure   Rounding_Rays;  
    //procedure Rounding_Sun;
  const 
    rad = 25;
  end;

implementation

constructor TSun.Create (const x,  y : integer) overload;
    begin
        self := TSun.Create;
        self.x := x;
        self.y := y;
    end;


procedure TSun.Draw(const Canvas: TCanvas);
    var
        k, j: integer;
        s, g, angle : real;
    begin
        angle := 0;
        Canvas.Pen.Color    := clYellow;
        Canvas.Brush.Color  := clYellow;
        Canvas.Ellipse(x-rad, y-rad, x+rad, y+rad);
        Canvas.Pen.Width := 3;
        k :=  25; s := 0; g := 2*pi/k;
        for j := 0 to k-1 do begin
            Canvas.moveto(x+round(rad*cos(s))+round(cos(s+angle)),y+round(rad*sin(s))+1*round(sin(s+angle)));
            Canvas.lineto(x+round((random(6) + 15) / 10*rad*cos(s+angle)),y+round((random(6) + 15) / 10*rad*sin(s+angle)));
            s := s + g;
        end;
    end;
end.
